layer helifuzzy is

     type Activity is
         weight: real;
		 steps: real;
		 fruits: real;
	 end Activity;
	 
	 type RealVector is
		 v1: real; -- control_weight
		 v2: real; -- walk_steps
		 v3: real; -- eat_fruits
		 v4: real; -- inc_physics
		 v5: real; -- sleep_better
	 end RealVector;
  
	 -- added increase physical activity ( in minutes ) and sleep_better ( in hours )
	 type Goal is
		 task: (control_weight, walk_steps_aweek, eat_fruits_aweek, inc_physics, sleep_better);    
		 target: RealVector;  -- targets for each task
		 w: RealVector; -- weight for each targets
	 end Goal;	 
	 
	 class HeliWeb is 
	 end HeliWeb;	 
	 
	 class Coach is 
	 end Coach;
	 	 
     ---- represents all external environment 
	 class World is
         day : real;
     end World;

	 ---- model for Participant as main actor
	 ---- it could incluid a property for progress if needed
	 class Patient is
	     id: integer;
		 can_send: boolean;
		 
         t_registered : real; --registration day
         t_last_activity : real; --last day when active
		 
		 goal: Goal;    -- Target goal for Activity
		 act: Activity;  -- Reported Activity

		 nmsg_rcvd : integer; -- Number of messages received from the coach
		 nmsg_sent : real; -- Number of times an Activity was Sent in a week
		 		 
		 m: real; -- Motivation to comply
		 v: real; -- compliance history 
		 prob: real;   -- Probability of sending Activity
		 
     	 adh: real;    -- Adherence of the patient (idem. PECS model)		 
		 status: (hapa_motivation, hapa_volition, hapa_maintenance);  -- adding HAPA status
	 end Patient;

     relation recvPatientAdherence (Patient, Coach) is 0..1 : 0..1;
     relation recvPatientMessage (Patient, Coach) is 0..1 : 0..1;

	 relation isPatientOfHeli (HeliWeb, Patient) is 0..1 : 0..30;
	 relation coachOfPatient (Coach, Patient) is 0..1 : 0..10;

	 -- Util functions
	 function exp(x:real) :real is
	     return (1.0 + x + x*x/2.0 + x*x*x/6.0 + x*x*x*x/24.0 + x*x*x*x*x/120.0 + x*x*x*x*x*x/720.0 + x*x*x*x*x*x*x/5040.0 + x*x*x*x*x*x*x*x/40320.0 + x*x*x*x*x*x*x*x*x/362880.0 + x*x*x*x*x*x*x*x*x*x/3628800.0 );
	 end; 

	 function pow (a:real;b:real) :real is
		 -- a^b = exp(b * ln(a)) a = 0.1 --> ln(a) = -2.3025
	     return 1.0/exp(2.3025*b);
	 end; 
	 
     -- Actions	 
	 action nextDay(w:World) is
     when true do
		 w.day:=w.day+1.0;
	 end;	 	 

 	 action registerHeliPatient(h:HeliWeb;p:Patient) is
     --when (p.t_registered=0.0 and not isPatientOfHeli(h,p)) do
     when (p.m = 1.0 and not isPatientOfHeli(h,p)) do -- p.t_registered = 0.0
		 isPatientOfHeli(h,p);
	 end;

	 action registerCoach(c:Coach;p:Patient) is
     when (p.t_registered>0.0 and not coachOfPatient(c,p)) do
		 coachOfPatient(c,p);
	 end;	 
	 
	 -- individual goals progress assume value exits
	 function weightProgress(p: Patient): real is
		 -- return 1.0; 
		 return 1.0 - abs(p.goal.target.v1 - p.act.weight)/(p.goal.target.v1+0.000001);
	 end;
	 function stepsProgress(p: Patient): real is
		 -- return 1.0; 
		 return 1.0 - (p.goal.target.v2 - p.act.steps)/(p.goal.target.v2+0.000001);
	 end;
	 function fruitsProgress(p: Patient): real is
		 -- return 1.0; 
		 return 1.0 - (p.goal.target.v3 - p.act.fruits)/(p.goal.target.v3+0.000001);
	 end;
	 
	 -- Adherence as a function of progress
	 function computeAdherance(w:World; p:Patient) : real is	  		 
		 return (p.goal.w.v1*weightProgress(p) +  p.goal.w.v2*stepsProgress(p) + p.goal.w.v3*fruitsProgress(p))/(p.goal.w.v1 + p.goal.w.v2 + p.goal.w.v3) ;
	 end;

     -- Coach Actions

	 action sendMessage1(c:Coach; p:Patient) is
     when (p.t_registered > 0.0 and p.adh < 0.4 and coachOfPatient(c,p)) do
 		 p.nmsg_rcvd := p.nmsg_rcvd+1;
     end;
	
	 action sendMessage2(c:Coach; p:Patient) is
     when (p.t_registered > 0.0 and p.adh < 0.6 and coachOfPatient(c,p)) do
		 p.nmsg_rcvd := p.nmsg_rcvd+1;
     end;

	 action sendMessage3(c:Coach; p:Patient) is
     when (p.t_registered > 0.0 and p.adh < 0.8 and coachOfPatient(c,p)) do
		 p.nmsg_rcvd := p.nmsg_rcvd+1;
     end;
	 
     -- Patient Actions
	 -- send a weight Goal
	 action sendGoalToHeLi(p:Patient; h:HeliWeb; w:World) is -- Registration starts from sending Goal 
     when (p.t_registered = 0.0) do
          isPatientOfHeli(h,p)
	     ||p.t_registered := w.day
		 ||p.t_last_activity := w.day
	     ||p.m:=1.0
		 --||p.goal:= Goal( task -> control_weight(), target := RealVector(v1:=71.0, v2:=0.0, v3:=0.0), w:= RealVector(v1:=1.0, v2:=0.0, v3:=0))
         ||p.status -> hapa_motivation(); 		 
     end;

     action sendActivity(p:Patient; h:HeliWeb; w:World) is -- Patients send their Activity periodically 
     when (isPatientOfHeli(h,p) and p.t_last_activity<=w.day and p.m > 0.0 and p.t_registered >0.0 and p.can_send) do
		  p.nmsg_sent := p.nmsg_sent + 1.0 
		 || p.adh := computeAdherance(w,p)
		 || p.t_last_activity := w.day;
	 end;
	 
	 -- sendActivity after receiving a motivational messages
	 action sendActivityAfterCoaching(p:Patient; h:HeliWeb; w:World) is -- Patients send their Activity periodically 
     when (isPatientOfHeli(h,p) and p.t_last_activity<=w.day and p.m > 0.0 and p.t_registered >0.0 
			and p.can_send and p.nmsg_rcvd > 1) do
		  p.nmsg_sent := p.nmsg_sent + 1.0 
		 || p.adh := computeAdherance(w,p)
		 || p.t_last_activity := w.day;
	 end;
	 
	 
	 --  this function will execute based on probabilities
	 action adjustProbabilities(p:Patient) is
	 when p.t_registered > 0.0 do 
	     p.v:= 1.0 - pow(0.1,p.nmsg_sent) -- 1.0 - powint(0.1,p.nmsg_sent,1.0)
		 || p.prob:= p.m * p.v * p.adh;
	 end; 

	 action adjustAdherance(p:Patient) is
	 when (p.adh > 1.0) do 
	     p.adh :=1.0
		 ||p.can_send := false
		 ||p.nmsg_rcvd :=0;
	 end; 

	 action eatOneFruit(p:Patient) is
	 when p.t_registered > 0.0 do 
	     p.act.fruits:= p.act.fruits + 1.0;
	 end; 	 
	 
	 action walked100steps(p:Patient) is
	 when p.t_registered > 0.0 do 
	     p.act.steps:= p.act.steps + 100.0;
	 end;
 	 
	 action lost1Kg(p:Patient) is
	 when p.t_registered > 0.0 do 
	     p.act.weight:= p.act.weight -1.0;
	 end;

	 action add1Kg(p:Patient) is
	 when p.t_registered > 0.0 do 
	     p.act.weight:= p.act.weight +1.0;
	 end;

     action updateState(p:Patient;w:World) is
	 when (true) do 
	     if (p.t_registered = 0.0 ) then
		     p.status -> hapa_motivation();
         elsif (p.nmsg_sent = 0.0) 	then
             p.status -> hapa_volition();
         elsif (p.nmsg_sent > 0.0) then
             -- check target and activity to check volition/progress state 
             p.status -> hapa_maintenance(); 
		 end if;
	 end; 	
	 	 
     action updateWeeklyActivity(p:Patient;w:World) is
	 when (w.day - p.t_last_activity > 7.0) do 
 		 p.act.fruits:= 0.0
		 ||p.act.steps:= 0.0
		 ||p.can_send:=true
		 ||p.adh := computeAdherance(w,p)
		 || p.nmsg_rcvd :=0;
	 end; 	 

	 -- Generated for 4 coaches and 21 patients 
	 -- coach 1( 2), 2 (2), 3 (1), 4 (1), 5(2)
	 -- goals as follows:
	 -- control weith: 4	 
	 -- better carbs: 1
	 -- stress: 4
	 -- fruits: 3
	 -- increase phy: 5	 
	 -- fats: 3
	 -- less sedentary: 2
	 -- regular meal: 1	 
	 -- sleep: 2

	 
 end heli;
