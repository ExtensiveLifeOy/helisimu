layer heli is

     type Activity is
         weight: real;
		 steps: integer;
		 fruits: integer;
	 end Activity;
  
	 type Goal is
		 typ: (control_weight, walk_steps_aweek, eat_fruits_aweek);    
		 val: real;  -- reals will include integers values
	 end Goal;

	 class HeliWeb is 
	 end HeliWeb;	 
	 
	 class Coach is 
	 end Coach;
	 	 
     ---- represents all external environment 
	 class World is
         day : real;
     end World;

	 class Patient is
	     id: integer;
		 
         t_registered : real; --registration day
         t_last_activity : real; --last day when active
		 
		 goal: Goal;    -- Target goal for Activity
		 act: Activity;  -- Reported Activity

		 nmsg_rcvd : integer; -- Number of messages received from the coach
		 nmsg_sent : real; -- Number of times an Activity was Sent in a week
		 
		 
		 m: real; -- Motivation to comply
		 v: real; -- compliance history 
		 prob: real;   -- Probability of sending Activity
     	 adh: real;    -- Adherence of the patient (idem. PECS model)		 
		 status: (hapa_motivation, hapa_volition, hapa_maintenance);  -- adding HAPA status
	 end Patient;
	 
     relation recvActivity (HeliWeb, Patient) is  0..1 : 0..99;

     relation recvPatientAdherence (Patient, Coach) is 0..1 : 0..1;
     relation recvPatientMessage (Patient, Coach) is 0..1 : 0..1;

	 relation isPatientOfHeli (HeliWeb, Patient) is 0..1 : 0..10;
	 relation coachOfPatient (Coach, Patient) is 0..1 : 0..10;

	 -- Util functions
	 function exp(x:real) :real is
	     return (1.0 + x + x*x/2.0 + x*x*x/6.0 + x*x*x*x/24.0 + x*x*x*x*x/120.0 + x*x*x*x*x*x/720.0 + x*x*x*x*x*x*x/5040.0 + x*x*x*x*x*x*x*x/40320.0 + x*x*x*x*x*x*x*x*x/362880.0 + x*x*x*x*x*x*x*x*x*x/3628800.0 );
	 end; 

	 function pow (a:real;b:real) :real is
		 -- a^b = exp(b * ln(a)) a = 0.1 --> ln(a) = -2.3025
	     return 1.0/exp(2.3025*b);
	 end; 
	 
     -- Actions	 
	 action nextDay(w:World) is
     when true do
		w.day:=w.day+1.0;
	 end;	 	 

 	 action registerHeliPatient(h:HeliWeb;p:Patient) is
     when (p.t_registered=0.0 and not isPatientOfHeli(h,p)) do
		isPatientOfHeli(h,p);
	 end;

	 action registerCoach(c:Coach;p:Patient) is
     when (p.t_registered>0.0 and not coachOfPatient(c,p)) do
		coachOfPatient(c,p);
	 end;
	 
     action recvActivity(h:HeliWeb; p:Patient) is
     when (p.t_registered > 0.0) do
 		 p.nmsg_sent := p.nmsg_sent + 1.0;
     end;
	 
	 function computeAdherance(w:World; p:Patient) : real is	 
		 return p.nmsg_sent / w.day; 
	 end;

     -- Coach Actions

	 action sendMessage1(c:Coach; p:Patient) is
     when (p.t_registered > 0.0 and p.adh < 0.4 and coachOfPatient(c,p)) do
 		 p.nmsg_rcvd := p.nmsg_rcvd+1;
     end;
	
	 action sendMessage2(c:Coach; p:Patient) is
     when (p.t_registered > 0.0 and p.adh < 0.6 and coachOfPatient(c,p)) do
		 p.nmsg_rcvd := p.nmsg_rcvd+1;
     end;

	 action sendMessage3(c:Coach; p:Patient) is
     when (p.t_registered > 0.0 and p.adh < 0.8 and coachOfPatient(c,p)) do
		 p.nmsg_rcvd := p.nmsg_rcvd+1;
     end;
	 
     -- Patient Actions
	 action sendGoalToHeLi(p:Patient; h:HeliWeb; w:World) is -- Registration starts from sending Goal 
     when (p.t_registered = 0.0) do
          isPatientOfHeli(h,p)
	     ||p.t_registered := w.day
		 ||p.t_last_activity := w.day
	     ||p.m:=1.0
         ||p.status -> hapa_motivation(); 		 
     end;

     action sendActivity(p:Patient; h:HeliWeb; w:World) is -- Patients send their Activity periodically 
     when (isPatientOfHeli(h,p) and p.t_last_activity<w.day and p.m > 0.0 and p.t_registered >0.0) do
		 recvActivity(h, p)
		 || p.adh := computeAdherance(w,p)
		 || p.t_last_activity := w.day;
	 end;
	 	 
	 --  this function will execute based on probabilities
	 action adjustProbabilities(p:Patient) is
	 when p.t_registered > 0.0 do 
	     p.v:= 1.0 - pow(0.1,p.nmsg_sent) -- 1.0 - powint(0.1,p.nmsg_sent,1.0)
		 || p.prob:= p.m * p.v * p.adh;
	 end; 

	 --function powint(a:real;b:integer; t:real) :real is
	 --	 for i in 1..b loop
	 --	     t = t*a;
	 --	 end loop
	 --	 return t;
	 --end

	 --function ln(x:real) :real is
	 --    -- if x in[-1,1] ln(1+a) = a - a^2/2 + a^3/3 - a^4/4 + a^5/5 - a^6/6 + a^7/7 ...
	 --    -- if x in[-1,1] ln(1+x/1-x) = 2x + 2x^3/3 + 2x^5/5 + 2x^7/7 + 2x^9/9 + 2x^11/11 ...	 
	 --    return ((x - 1.0) - (x - 1.0)*(x - 1.0)/2.0 + (x - 1.0)*(x - 1.0)*(x - 1.0)/3.0 - (x - 1.0)*(x - 1.0)*(x - 1.0)*(x - 1.0)/4.0 + (x - 1.0)*(x - 1.0)*(x - 1.0)*(x - 1.0)*(x - 1.0)/5.0 - (x - 1.0)*(x - 1.0)*(x - 1.0)*(x - 1.0)*(x - 1.0)*(x - 1.0)/6.0 + (x - 1.0)*(x - 1.0)*(x - 1.0)*(x - 1.0)*(x - 1.0)*(x - 1.0)*(x - 1.0)/7.0);
	 --    --return 2.0*(((x+1.0)/(1.0-x)) + ((x+1.0)/(1.0-x))*((x+1.0)/(1.0-x))*((x+1.0)/(1.0-x))/3.0 + ((x+1.0)/(1.0-x))*((x+1.0)/(1.0-x))*((x+1.0)/(1.0-x))*((x+1.0)/(1.0-x))*((x+1.0)/(1.0-x))/5.0 + ((x+1.0)/(1.0-x))*((x+1.0)/(1.0-x))*((x+1.0)/(1.0-x))*((x+1.0)/(1.0-x))*((x+1.0)/(1.0-x))*((x+1.0)/(1.0-x))*((x+1.0)/(1.0-x))/7.0 + ((x+1.0)/(1.0-x))*((x+1.0)/(1.0-x))*((x+1.0)/(1.0-x))*((x+1.0)/(1.0-x))*((x+1.0)/(1.0-x))*((x+1.0)/(1.0-x))*((x+1.0)/(1.0-x))*((x+1.0)/(1.0-x))*((x+1.0)/(1.0-x))/9.0 + ((x+1.0)/(1.0-x))*((x+1.0)/(1.0-x))*((x+1.0)/(1.0-x))*((x+1.0)/(1.0-x))*((x+1.0)/(1.0-x))*((x+1.0)/(1.0-x))*((x+1.0)/(1.0-x))*((x+1.0)/(1.0-x))*((x+1.0)/(1.0-x))*((x+1.0)/(1.0-x))*((x+1.0)/(1.0-x))/11.0); 
	 --end; 

     action eatOneFruit(p:Patient) is
	 when p.t_registered > 0.0 do 
	     p.act.fruits:= p.act.fruits + 1;
	 end; 	 
	 
	 action walked100steps(p:Patient) is
	 when p.t_registered > 0.0 do 
	     p.act.steps:= p.act.steps + 100;
	 end;
 	 
	 action lost1Kg(p:Patient) is
	 when p.t_registered > 0.0 do 
	     p.act.weight:= p.act.weight -1.0;
	 end;

	 action add1Kg(p:Patient) is
	 when p.t_registered > 0.0 do 
	     p.act.weight:= p.act.weight +1.0;
	 end;

     action updateState(p:Patient) is
	 when (true) do 
	     if (p.t_registered = 0.0 ) then
		     p.status ->  hapa_volition();
         elsif (p.nmsg_sent = 0.0) 	then
             p.status -> hapa_motivation();
         elsif (p.nmsg_sent > 0.0) then
             -- check target and activity to check volition/progress state 
            p.status -> hapa_maintenance();  			 
		 end if;
	 end; 	 

 end heli;
